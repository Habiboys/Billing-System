openapi: 3.0.0
info:
  title: Billing System API
  version: 1.0.0
  description: API documentation for the Billing System application
servers:
  - url: http://34.50.77.4:3000/api
    description: Deploy yeah
  - url: https://sponge-quiet-brightly.ngrok-free.app/api
    description: tunel
  - url: http://localhost:3000/api
    description: Local

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        token:
          type: string
        type:
          type: string
          enum: [admin, user]
      required:
        - email
        - password
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        costPerHour:
          type: number
          format: float
      required:
        - name
        - costPerHour
    Device:
      type: object
      properties:
        id:
          type: string
          description: Device ID yang terkoneksi ke WebSocket server
        name:
          type: string
          description: Nama device
        categoryId:
          type: string
          format: uuid
          description: ID kategori device
        timerStart:
          type: string
          format: date-time
          description: Waktu mulai timer
        timerDuration:
          type: integer
          description: Durasi timer
        createdAt:
          type: string
          format: date-time
          description: Waktu pembuatan record
        updatedAt:
          type: string
          format: date-time
          description: Waktu terakhir update record
      required:
        - id
        - name
        - categoryId
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        deviceId:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        duration:
          type: integer
        cost:
          type: number
          format: float
      required:
        - userId
        - deviceId
        - duration

paths:
  /auth/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              example:
                email: admin@example.com
                password: admin123

      responses:
        "200":
          description: Successful login
        "401":
          description: Unauthorized
  /auth/refresh-token:
    post:
      summary: Refresh authentication token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: The refresh token received during login
              required:
                - refreshToken
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string

        "401":
          description: Unauthorized (Invalid refresh token)
      security:
        - BearerAuth: []
  /auth/create-user:
    post:
      summary: Create a new user (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User created successfully
        "403":
          description: Forbidden (Admin access required)

  /category/create:
    post:
      summary: Create a new category (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "201":
          description: Category created successfully
        "403":
          description: Forbidden (Admin access required)
  /category:
    get:
      summary: Get all categories
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of categories
  /category/{id}:
    get:
      summary: Get category by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the category to retrieve
      responses:
        "200":
          description: Category data
        "404":
          description: Category not found
  /category/update/{id}:
    put:
      summary: Update a category by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "200":
          description: Category updated successfully
        "403":
          description: Forbidden (Admin access required)
        "404":
          description: Category not found
  /category/delete/{id}:
    delete:
      summary: Delete a category by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the category to delete
      responses:
        "200":
          description: Category deleted successfully
        "403":
          description: Forbidden (Admin access required)
        "404":
          description: Category not found

  /device/create:
    post:
      summary: Create a new device (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Device"
      responses:
        "201":
          description: Device created successfully
        "403":
          description: Forbidden (Admin access required)
  /device:
    get:
      summary: Get all device (Admin only)
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of device
        "403":
          description: Forbidden (Admin access required)
  /device/{id}:
    get:
      summary: Get device by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
      
          required: true
          description: ID of the device to retrieve
      responses:
        "200":
          description: Device data
        "403":
          description: Forbidden (Admin access required)
        "404":
          description: Device not found
  /device/update/{id}:
    put:
      summary: Update a device by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the device to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Device"
      responses:
        "200":
          description: Device updated successfully
        "403":
          description: Forbidden (Admin access required)
        "404":
          description: Device not found
  /device/delete/{id}:
    delete:
      summary: Delete a device by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID of the device to delete
      responses:
        "200":
          description: Device deleted successfully
        "403":
          description: Forbidden (Admin access required)
        "404":
          description: Device not found

  /device/{id}/command:
    post:
      summary: Send command to device
      description: Mengirim perintah start/stop/end ke device melalui WebSocket
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID device yang akan dikirim perintah
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                command:
                  type: string
                  enum: [start, stop, end]
                  description: Perintah yang akan dikirim ke device (start = mulai timer, stop = pause timer, end = akhiri timer)
              required:
                - command
              example:
                command: "start"
      responses:
        "200":
          description: Perintah berhasil dikirim
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Berhasil mengirim perintah start ke device
                  data:
                    type: object
                    properties:
                      command:
                        type: object
                        properties:
                          type:
                            type: string
                            example: command
                          device_id:
                            type: string
                          command:
                            type: string
                            enum: [start, stop, end]
                          timestamp:
                            type: string
                            format: date-time
                      device:
                        type: object
                        properties:
                          id:
                            type: string
                          timerStatus:
                            type: string
                            enum: [start, stop, end]
                            description: Status timer device
                          timerStart:
                            type: string
                            format: date-time
                            nullable: true
                          timerDuration:
                            type: integer
                          timerElapsed:
                            type: integer
                          lastPausedAt:
                            type: string
                            format: date-time
                            nullable: true
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Command harus berupa "start", "stop", atau "end"
        "404":
          description: Device tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Device tidak ditemukan

  /connection/unregistered:
    get:
      summary: Get unregistered devices

  /connection/disconnected:
    get:
      summary: Get disconnected devices

  /connection/status:
    get:
      summary: Get connection status
      description: Mendapatkan status koneksi semua device yang terdaftar
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Status koneksi berhasil diambil
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalClients:
                    type: integer
                    description: Total client yang terkoneksi ke WebSocket
                  registeredDevices:
                    type: integer
                    description: Total device yang terdaftar
                  devices:
                    type: array
                    items:
                      type: object
                      properties:
                        device_id:
                          type: string
                          description: ID device
                        deviceId:
                          type: string
                          description: ID device (alias)
                        status:
                          type: string
                          enum: [on, off, pause]
                          description: Status device (on = timer aktif, pause = device terkoneksi tapi timer dihentikan, off = device tidak terkoneksi)

  /transaction:
    get:
      summary: Get all transactions (Admin only)
      description: Mendapatkan daftar semua transaksi dengan filter tanggal dan pagination
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: start_date
          schema:
            type: string
            format: date
          description: Tanggal mulai filter (format: YYYY-MM-DD)
        - in: query
          name: end_date
          schema:
            type: string
            format: date
          description: Tanggal selesai filter (format: YYYY-MM-DD)
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Nomor halaman
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Jumlah data per halaman
      responses:
        "200":
          description: Daftar transaksi berhasil diambil
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    properties:
                      transactions:
                        type: array
                        items:
                          $ref: "#/components/schemas/Transaction"
                      pagination:
                        type: object
                        properties:
                          totalItems:
                            type: integer
                            example: 100
                          totalPages:
                            type: integer
                            example: 10
                          currentPage:
                            type: integer
                            example: 1
                          itemsPerPage:
                            type: integer
                            example: 10
                          hasNextPage:
                            type: boolean
                            example: true
                          hasPrevPage:
                            type: boolean
                            example: false
        "400":
          description: Format tanggal tidak valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Format tanggal mulai tidak valid (gunakan format: YYYY-MM-DD)
        "401":
          description: Unauthorized
        "403":
          description: Forbidden (Admin access required)
        "500":
          description: Internal Server Error

  /transaction/create:
    post:
      summary: Create a new transaction
      description: Membuat transaksi baru dan mengirim timer ke device melalui WebSocket
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deviceId:
                  type: string
                  description: ID device yang akan digunakan
                duration:
                  type: integer
                  description: Durasi penggunaan dalam milidetik
                start:
                  type: string
                  format: date-time
                  description: Waktu mulai (opsional)
                end:
                  type: string
                  format: date-time
                  description: Waktu selesai (opsional)
                cost:
                  type: number
                  format: float
                  description: Biaya transaksi (opsional)
              required:
                - userId
                - deviceId
                - duration
      responses:
        "201":
          description: Transaksi berhasil dibuat
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Transaksi berhasil dibuat
                  data:
                    type: object
                    properties:
                      transaction:
                        $ref: "#/components/schemas/Transaction"
                      deviceCommand:
                        type: object
                        properties:
                          deviceId:
                            type: string
                          timer:
                            type: integer
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: userId, deviceId, dan duration wajib diisi
        "404":
          description: Device tidak ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Device tidak ditemukan di database
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Terjadi kesalahan saat membuat transaksi
                  error:
                    type: string

  /transaction/{id}:
    get:
      summary: Get transaction by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID transaksi yang ingin diambil
      responses:
        "200":
          description: Data transaksi ditemukan
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  data:
                    $ref: "#/components/schemas/Transaction"
        "404":
          description: Transaksi tidak ditemukan
        "500":
          description: Internal Server Error

  /transactions/user/{userId}:
    get:
      tags:
        - Transactions
      summary: Get transactions by user ID
      description: Retrieve all transactions for a specific user with pagination and date filtering
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: ID of the user
        - name: start_date
          in: query
          schema:
            type: string
            format: date
          description: Filter transactions from this date (format: YYYY-MM-DD)
        - name: end_date
          in: query
          schema:
            type: string
            format: date
          description: Filter transactions until this date (format: YYYY-MM-DD)
        - name: page
          in: query
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Successfully retrieved transactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    properties:
                      transactions:
                        type: array
                        items:
                          $ref: '#/components/schemas/Transaction'
                      pagination:
                        type: object
                        properties:
                          totalItems:
                            type: integer
                          totalPages:
                            type: integer
                          currentPage:
                            type: integer
                          itemsPerPage:
                            type: integer
                          hasNextPage:
                            type: boolean
                          hasPrevPage:
                            type: boolean
        '400':
          description: Invalid date format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transaction/update/{id}:
    put:
      summary: Update transaction by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID transaksi yang akan diupdate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                start:
                  type: string
                  format: date-time
                end:
                  type: string
                  format: date-time
                duration:
                  type: integer
                cost:
                  type: number
                  format: float
      responses:
        "200":
          description: Transaksi berhasil diupdate
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Transaction updated successfully
                  data:
                    $ref: "#/components/schemas/Transaction"
        "404":
          description: Transaksi tidak ditemukan
        "500":
          description: Internal Server Error

  /transaction/delete/{id}:
    delete:
      summary: Delete transaction by ID
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID transaksi yang akan dihapus
      responses:
        "200":
          description: Transaksi berhasil dihapus
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Transaction deleted successfully
        "400":
          description: Format UUID tidak valid
        "404":
          description: Transaksi tidak ditemukan
        "500":
          description: Internal Server Error
